// <auto-generated />
using MVC_8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_8.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220906141921_Init-9-2")]
    partial class Init92
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Axevalla"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Floby"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Götene"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Hällekis"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Källby"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Lerdala"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Skulltorp"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Stenstorp"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Tibro"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Tidaholm"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "Töreboda"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Name = "New York"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Skaraborg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 12,
                            Name = "Ulla Vretman",
                            Phone = "580926"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Ulla Jonsson",
                            Phone = "913762"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 9,
                            Name = "Klas Dahl",
                            Phone = "528613"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 9,
                            Name = "Klas Walker",
                            Phone = "764082"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 11,
                            Name = "Yngve Carlsson",
                            Phone = "288139"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.HasOne("MVC_8.Models.Home.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_8.Models.Home.Person", b =>
                {
                    b.HasOne("MVC_8.Models.Home.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVC_8.Models.Home.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
