// <auto-generated />
using System;
using MVC_8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_8.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.HasKey("LanguagesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LanguagePerson");

                    b.HasData(
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 1
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 2
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 3
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 3
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 3
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 3
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 4
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 5
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 5
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 5
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 6
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 6
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 6
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 6
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 7
                        },
                        new
                        {
                            LanguagesId = 1,
                            PeopleId = 8
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 10
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 10
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 10
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 12
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 12
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 12
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 12
                        },
                        new
                        {
                            LanguagesId = 6,
                            PeopleId = 13
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 13
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 13
                        },
                        new
                        {
                            LanguagesId = 1,
                            PeopleId = 14
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 14
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 14
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 14
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 15
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 15
                        },
                        new
                        {
                            LanguagesId = 1,
                            PeopleId = 15
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 16
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 16
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 16
                        },
                        new
                        {
                            LanguagesId = 6,
                            PeopleId = 16
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 17
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 17
                        },
                        new
                        {
                            LanguagesId = 6,
                            PeopleId = 17
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 18
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 18
                        },
                        new
                        {
                            LanguagesId = 1,
                            PeopleId = 18
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 19
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 20
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 20
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 20
                        },
                        new
                        {
                            LanguagesId = 6,
                            PeopleId = 20
                        },
                        new
                        {
                            LanguagesId = 2,
                            PeopleId = 21
                        },
                        new
                        {
                            LanguagesId = 6,
                            PeopleId = 21
                        },
                        new
                        {
                            LanguagesId = 3,
                            PeopleId = 22
                        },
                        new
                        {
                            LanguagesId = 7,
                            PeopleId = 22
                        },
                        new
                        {
                            LanguagesId = 5,
                            PeopleId = 22
                        },
                        new
                        {
                            LanguagesId = 1,
                            PeopleId = 22
                        },
                        new
                        {
                            LanguagesId = 4,
                            PeopleId = 23
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "34140290-2abe-488e-8340-3fd21e72d159",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "41ed0178-5107-4742-aaf1-efaeb1868788",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2fe164a1-5ac0-4f32-a924-c3ff64d3ceee",
                            RoleId = "34140290-2abe-488e-8340-3fd21e72d159"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_8.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2fe164a1-5ac0-4f32-a924-c3ff64d3ceee",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "00024d25-f772-42cb-9de0-1e41cb23f03b",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEH8luAwVo7gJJSHcCwXPe1m4GRyBQ9BzHmXjkNfLrd+IHDy2Tfr9M+HGQy8B0NFYJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4af2ed49-53a3-4b09-8249-38dbbdb0821f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Axevalla"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Floby"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Götene"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Hällekis"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Källby"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Lerdala"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Skulltorp"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Stenstorp"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Tibro"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Tidaholm"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "Töreboda"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Name = "New York"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Skaraborg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Klingon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meänkieli"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mixtec"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Papiamento"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Swahili"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Volapük"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Väschözzga"
                        });
                });

            modelBuilder.Entity("MVC_8.Models.Home.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 9,
                            Name = "Adrian Walker",
                            Phone = "873105"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 10,
                            Name = "Kim Dahl",
                            Phone = "683555"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 4,
                            Name = "Ilja Dahl",
                            Phone = "170913"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 11,
                            Name = "Kalle Fahlgren",
                            Phone = "961453"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 9,
                            Name = "Lotta Zackow",
                            Phone = "201380"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 4,
                            Name = "Lotta Dahl",
                            Phone = "344441"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 12,
                            Name = "Klas Hjalmarsson",
                            Phone = "191472"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 11,
                            Name = "Dave Lindgren",
                            Phone = "843353"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 9,
                            Name = "Ilja Hjalmarsson",
                            Phone = "477132"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 5,
                            Name = "Lisbet Sventon",
                            Phone = "317017"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 11,
                            Name = "Kim Vretman",
                            Phone = "470380"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 7,
                            Name = "Osborn Lindgren",
                            Phone = "766548"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 9,
                            Name = "Nisse Erixon",
                            Phone = "783601"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 11,
                            Name = "Alva Ivarsson",
                            Phone = "745135"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 10,
                            Name = "Ture Erixon",
                            Phone = "997749"
                        },
                        new
                        {
                            Id = 16,
                            CityId = 4,
                            Name = "Ture Dahl",
                            Phone = "991316"
                        },
                        new
                        {
                            Id = 17,
                            CityId = 12,
                            Name = "Alva Lindgren",
                            Phone = "645981"
                        },
                        new
                        {
                            Id = 18,
                            CityId = 4,
                            Name = "Beda Ålander",
                            Phone = "475535"
                        },
                        new
                        {
                            Id = 19,
                            CityId = 9,
                            Name = "Adrian Fahlgren",
                            Phone = "561129"
                        },
                        new
                        {
                            Id = 20,
                            CityId = 7,
                            Name = "Alva Fahlgren",
                            Phone = "428767"
                        },
                        new
                        {
                            Id = 21,
                            CityId = 1,
                            Name = "Beda Bildt",
                            Phone = "676625"
                        },
                        new
                        {
                            Id = 22,
                            CityId = 12,
                            Name = "Beda Carlsson",
                            Phone = "754983"
                        },
                        new
                        {
                            Id = 23,
                            CityId = 7,
                            Name = "Ture Hjalmarsson",
                            Phone = "365754"
                        },
                        new
                        {
                            Id = 24,
                            CityId = 7,
                            Name = "Beda Zackow",
                            Phone = "649071"
                        },
                        new
                        {
                            Id = 25,
                            CityId = 10,
                            Name = "Lotta Hjalmarsson",
                            Phone = "316138"
                        });
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("MVC_8.Models.Home.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVC_8.Models.Home.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVC_8.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVC_8.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVC_8.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVC_8.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.HasOne("MVC_8.Models.Home.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_8.Models.Home.Person", b =>
                {
                    b.HasOne("MVC_8.Models.Home.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_8.Models.Home.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVC_8.Models.Home.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
